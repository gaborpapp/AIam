automatic detection of whether training data cache can be used (currently, it needs to be removed manually when some parameter such as --translation-weight is changed)
  perhaps using profiles?

explore random trajectories within dense areas of reduction space
  eliminate discontinuities between paths (better clamping of curve endpoints)

ensure that quaternion discontinuity problem (see README) cannot appear in real cases
  work started with analyze_quaternions.py

real-time interaction
  switch between interaction modes (follow, improvise etc)?
  more real-time modes in addition to "follow"?
  use mapping as output only with old state-based input?

interactive evolution of trajectories?
